-- Ci sono 2 giocatori (agente 1: treno, agente 2: controllore delle sbarre)
-- I 2 giocatori hanno possibilit√† diverse
-- Agente 1 (train): fa richiesta, non fa richiesta, ha autorizzazione
-- Agente 2 (ctr): accorda richiesta, non accorda richiesta, ritarda gestione

Agent Enviroment
	Vars:
		train_state: {out_of_gate, in_gate, out_of_gate_request, out_of_gate_grant};
	end Vars:
	Actions = {q0_q0, q0_q1, q2_q0, q2_q3};
	Protocol:
		train_state=out_of_gate: {q0_q0, q0_q1};	
		train_state=in_gate: {q3_q3, q3_q0};
		train_state=out_of_gate_request: {q1_q1, q1_q0,q1_q2};
		train_state=out_of_gate_grant: {q2_q0, q2_q3};
		
	end Protocol
	Evolution:
		train=out_of_gate if((Action=q3_q0) or (Action=q1_q0) or (Action=q2_q0) or (Action=q0_q0))

		train=in_gate if((Action=q3_q3) or (Action=q2_q3))

		train=out_of_gate_request if((Action=q1_q1) or (Action=q0_q1))

		train=out_of_gate_grant if((Action=q1_q2))
	end Evolution
end Agent

Agent ctr
	Vars:
		in_q1: {T, F};
		in_q3: {T, F};
	end Vars
	Actions = {q1_q2, q1_q0, q1_q1, q3_q3, q3_q0};
	Protocol:
		in_q1=T: {q1_q1, q1_q0, q1_q2};
		in_q1=F: {nothing};

		in_q3=T: {q3_q3, q3_q0};
		in_q3=F: {nothing};
	end Protocol
	Evolution
		in_q1=F if(((Enviroment.Action=q0_q0) or (Enviroment.Action=q2_q0) or  (Enviroment.Action=q2_q3) or
			(Action=q1_q2) or (Action=q1_q0) or (Action=q3_q3) or (Action=q3_q0)))
		in_q1=T if((Action=q1_q1) or (Enviroment.Action=q0_q1))

		in_q3=F if((Enviroment.Action=q0_q0) or (Enviroment.Action=q0_q1) or (Enviroment.Action=q2_q0) or
			 (Action=q1_q2) or (Action=q1_q0) or (Action=q1_q1) or  (Action=q3_q0))
		in_q3=T if((Action=q3_q3) or (Enviroment.Action=q2_q3))
	end Evolution
end Agent
	Evaluation
		q0 if(Enviroment.train=out_of_gate)
		q1 if(Enviroment.train=out_of_gate_request)
		q2 if(Enviroment.train=out_of_gate_grant)
		q3 if(Enviroment.train=in_gate)
	end Evaluation
	
Init States
	((Enviroment.train=out_of_gate and ctr.in_q1=F and ctr.in_q3=F));
end Init States

Fairness 
end Fairness

Formulae
AG(in_gate)
end Formulae